# -*- coding: utf-8 -*-
"""movie_recommendation.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18fZLRJqJpBQbK3kHlBAKPq0PERUxaiSl
"""

#Testing the Count Vectorizer function

from sklearn.feature_extraction.text import CountVectorizer
import pandas as pd
import numpy as np

text = ["London Paris London","Paris Paris London"]
vectorizer = CountVectorizer()

matrix = vectorizer.fit_transform(text)
matrix.toarray()

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(matrix)

similarity

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def get_title_from_index(index):
	return df[df.index == index]["title"].values[0]

def get_index_from_title(title):
	return df[df.title == title]["index"].values[0]

#eading the dataset

df=pd.read_csv("/content/movie_dataset.csv")

print(df.head())

df.columns

features=['keywords','cast','genres','director']

for feature in features:
  df[feature] =df[feature].fillna(" ")

def combine_features(row):
  try:
     return row['keywords']+" "+row['cast']+" "+row["genres"]+" "+row["director"]
  except:
     print(row)

df["combined_features"] = df.apply(combine_features,axis=1)

print(df["combined_features"].head())

//Finding the similarity matrix

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()

matrix = vectorizer.fit_transform(df["combined_features"])

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(matrix)

similarity

#Testing the system
movie = "Avatar"

index = get_index_from_title(movie)
similar = list(enumerate(similarity[index]))

#Sorting in descending order

sort_sim = sorted(similar,key=lambda x:x[1],reverse=True)
sort_sim

#Displaying the final results - upto 50 results

i=0
for movie in sort_sim:
   print(get_title_from_index(movie[0]))
   i=i+1
   if(i>50):
    break